{"version":3,"sources":["utils/fetchData.js","components/status/index.js","utils/formatDate.js","components/transaction/index.js","utils/sortTransactionsByDate.js","App.js","serviceWorker.js","index.js"],"names":["fetchData","jsonData","data","status","props","react_default","a","createElement","className","concat","toLowerCase","formattedDate","unformattedDate","date","Date","getDate","toString","padStart","getMonth","getFullYear","transaction","_props$detail","detail","transactionDate","amount","paymentMethod","formatDate","components_status","sortTransactionsByDate","transactions","sort","b","App","state","this","fetchAndUpdate","window","addEventListener","scrollHandler","bind","sortedData","mergedData","setState","Object","objectSpread","document","body","getBoundingClientRect","bottom","map","item","components_transaction","key","transactionId","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8nZAgBeA,EAbG,WAEd,OAAOC,EAASC,MCQLC,SAVA,SAACC,GAAU,IAChBD,EAAWC,EAAXD,OAER,OACEE,EAAAC,EAAAC,cAAA,QAAMC,UAAS,UAAAC,OAAYN,EAAOO,gBAC/BP,KCHQQ,EALO,SAAAC,GACpB,IAAMC,EAAO,IAAIC,KAAKF,GACtB,SAAAH,OAAUI,EAAKE,UAAUC,WAAWC,SAAS,EAAG,KAAhD,KAAAR,QAAyDI,EAAKK,WAAa,GAAGF,WAAWC,SAAS,EAAG,KAArG,KAAAR,OAA6GI,EAAKM,cAAcH,aC6BnHI,SAzBK,SAAChB,GAAU,IAAAiB,EAC8BjB,EAAMkB,OAAzDC,EADqBF,EACrBE,gBAAiBpB,EADIkB,EACJlB,OAAQqB,EADJH,EACIG,OAAQC,EADZJ,EACYI,cAEzC,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qBAAqBkB,EAAWH,IAChDlB,EAAAC,EAAAC,cAACoB,EAAD,CAAiBxB,OAAQA,KAE3BE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAS,uBAAAC,OAAoC,WAAXN,EAAsB,iBAAmB,OAC9EqB,EADH,WAGAnB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qBAEM,SAAlBiB,EACIpB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,2BCddoB,EATgB,SAAAC,GAC7B,OAAOA,EAAaC,KAClB,SAACxB,EAAGyB,GAEF,OADmB,IAAIjB,KAAKiB,EAAER,iBAAmB,IAAIT,KAAKR,EAAEiB,oBC2CnDS,6MAtCbC,MAAQ,CACN/B,KAAM,uFAINgC,KAAKC,iBACLC,OAAOC,iBAAiB,SAAUH,KAAKI,cAAcC,KAAKL,kLAIvClC,WAAbE,SAEAsC,EAAaZ,EADC1B,GAAc,IAG5BuC,wBAAiBP,KAAKD,MAAM/B,kBAASsC,IAC3CN,KAAKQ,SAALC,OAAAC,EAAA,EAAAD,CAAA,GAAmBT,KAAKD,MAAxB,CAA+B/B,KAAMuC,+IAIZI,SAASC,KAAKC,wBAAwBC,OAExC,KACrBd,KAAKC,kDAIA,IACCjC,EAASgC,KAAKD,MAAd/B,KACR,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,0BACEL,EAAK+C,IAAK,SAAAC,GAAI,OAAI7C,EAAAC,EAAAC,cAAC4C,EAAD,CAAa7B,OAAQ4B,EAAME,IAAKF,EAAKG,0BAjC/CC,aCKEC,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAAShB,SAASiB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.58b16245.chunk.js","sourcesContent":["import { BASE_URL, USE_LOCAL_DATA } from '../common/common';\nimport jsonData from '../data/data.json';\n\nconst fetchData = () => {\n  if(USE_LOCAL_DATA) {\n    return jsonData.data;\n  }\n\n  const fetchedData = fetch(`${BASE_URL}/transactions`)\n    .then(response => response.json())\n    .then(response => response.data)\n    .catch( error => console.log(error));\n\n  return fetchedData;\n}\n\nexport default fetchData;","import React from 'react';\nimport './status.css';\n\nconst status = (props) => {\n  const { status } = props;\n\n  return (\n    <span className={`status ${status.toLowerCase()}`}>\n      {status}\n    </span>\n  );\n};\n\nexport default status;","const formattedDate = unformattedDate => {\n  const date = new Date(unformattedDate);\n  return `${date.getDate().toString().padStart(2, \"0\")}/${(date.getMonth() + 1).toString().padStart(2, \"0\")}/${date.getFullYear().toString()}`;\n}\n\nexport default formattedDate;","import React from 'react';\nimport StatusComponent from '../status/';\nimport formatDate from '../../utils/formatDate';\n\nimport './transaction.css';\n\nconst transaction = (props) => {\n  const { transactionDate, status, amount, paymentMethod } = props.detail;\n\n  return (\n    <div className=\"transaction__row\">\n      <div className=\"transaction__data_status\">\n        <span className=\"transaction__date\">{formatDate(transactionDate)}</span>\n        <StatusComponent status={status}/>\n      </div>\n      <div className=\"transaction__amount_type\">\n        <span className={`transaction__amount ${status === 'Failed' ? 'status__failed' : null}`}>\n          {amount} â‚¬\n        </span>\n        <span className=\"transaction__type\">\n          {\n            paymentMethod === 'Card' \n              ? <i className=\"far fa-credit-card\" /> \n              : <i className=\"fas fa-money-bill\" />\n          }\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default transaction;","const sortTransactionsByDate = transactions => {\n  return transactions.sort(\n    (a, b) => {\n      const comparison = new Date(b.transactionDate) - new Date(a.transactionDate);\n      return comparison;\n    }\n  );\n}\n\nexport default sortTransactionsByDate;","import React, { Component } from 'react';\nimport './App.css';\n\nimport fetchData from './utils/fetchData';\nimport Transaction from './components/transaction/';\nimport sortTransactionsByDate from './utils/sortTransactionsByDate';\n\nclass App extends Component {\n  state = {\n    data: [],\n  }\n\n  componentDidMount() {\n    this.fetchAndUpdate();\n    window.addEventListener('scroll', this.scrollHandler.bind(this));\n  }\n\n  async fetchAndUpdate () {\n    const data = await fetchData();\n    const fetchedData = data ? data : [];\n    const sortedData = sortTransactionsByDate(fetchedData);\n\n    const mergedData = [...this.state.data, ...sortedData];\n    this.setState({ ...this.state, data: mergedData });\n  }\n\n  scrollHandler() {\n    const distanceToBottom = document.body.getBoundingClientRect().bottom;\n    \n    if (distanceToBottom < 1000) {\n      this.fetchAndUpdate();\n    }\n  }\n\n  render() {\n    const { data } = this.state;\n    return (\n      <div className=\"App\">\n        <h3>Welcome to the SumUp task!</h3>\n        <p>Sales History</p>\n        { data.map( item => <Transaction detail={item} key={item.transactionId}/> ) }\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}